// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Util = require("./Util.bs.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function mk(min, stepSize, values) {
  return /* record */[
          /* min */min,
          /* stepSize */stepSize,
          /* values */values
        ];
}

function areCompatible(ns1, ns2) {
  if (ns1[/* min */0] === ns2[/* min */0] && ns1[/* stepSize */1] === ns2[/* stepSize */1]) {
    return +(ns1[/* values */2].length === ns2[/* values */2].length);
  } else {
    return /* false */0;
  }
}

function add(valueAdd, ns1, ns2) {
  if (areCompatible(ns1, ns2)) {
    return /* record */[
            /* min */ns1[/* min */0],
            /* stepSize */ns1[/* stepSize */1],
            /* values */$$Array.mapi((function (i, x) {
                    return Curry._2(valueAdd, x, Caml_array.caml_array_get(ns2[/* values */2], i));
                  }), ns1[/* values */2])
          ];
  } else {
    return Pervasives.failwith("ex");
  }
}

function scale(valueScale, s, ns) {
  return /* record */[
          /* min */ns[/* min */0],
          /* stepSize */ns[/* stepSize */1],
          /* values */$$Array.map((function (x) {
                  return Curry._2(valueScale, s, x);
                }), ns[/* values */2])
        ];
}

function toFunction(add, scale, solution) {
  var interpolate = function (ratio, leftVal, rightVal) {
    var diff = Curry._2(add, rightVal, Curry._2(scale, -1.0, leftVal));
    return Curry._2(scale, ratio, diff);
  };
  return (function (t) {
      if (t < solution[/* min */0] || t > solution[/* min */0] + solution[/* stepSize */1] * solution[/* values */2].length) {
        return /* None */0;
      } else {
        var match = Util.intAndDecimalPart((t - solution[/* min */0]) / solution[/* stepSize */1]);
        var idx = match[0];
        var result = idx === (solution[/* values */2].length - 1 | 0) ? Caml_array.caml_array_get(solution[/* values */2], idx) : Curry._2(add, Caml_array.caml_array_get(solution[/* values */2], idx), interpolate(match[1], Caml_array.caml_array_get(solution[/* values */2], idx), Caml_array.caml_array_get(solution[/* values */2], idx + 1 | 0)));
        return /* Some */[result];
      }
    });
}

exports.mk = mk;
exports.areCompatible = areCompatible;
exports.add = add;
exports.scale = scale;
exports.toFunction = toFunction;
/* No side effect */
